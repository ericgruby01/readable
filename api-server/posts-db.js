module.exports = {
    "id_7yw5s43rke5": {
        id: 'id_7yw5s43rke5',
        timestamp: 1542372074928,
        title: 'Test Post',
        body: '![Image](https://static.boredpanda.com/blog/wp-content/uploads/2015/11/reflection-landscape-photography-jaewoon-u-fb.jpg)\n\n#### TL;DR\nA bunch of Lorem Ipsum.\n\n#### Test post\n\n**This** post can be edited/deleted _only_ by it\'s owner. And the owner is you, Udacity Student!\n\nThe Markdown is possible thanks to [this amazing library](https://github.com/rexxars/react-markdown) üòÅ\n\nAnd now a little Lorem Ipsum.\n\n***\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nec lacus a velit ornare varius eget placerat tortor. In hendrerit aliquam eros quis semper. Cras in nibh dapibus, congue magna ut, lobortis est. In et lectus felis. Sed ornare nulla at varius commodo. Phasellus lacinia placerat consectetur. Aliquam vel imperdiet justo. Pellentesque mollis vel nunc et tincidunt. Vestibulum leo eros, sodales et purus ut, pretium tempus dui. Morbi consectetur non turpis et dignissim. Ut a nisi tincidunt, malesuada tellus ut, euismod ex. Aliquam erat volutpat.\n\nNullam auctor sapien odio, non dictum erat dapibus vitae. Sed sed blandit massa, vitae auctor tellus. Nunc tincidunt lorem lorem, eu aliquet ante cursus sed. Vestibulum rutrum sapien ac ultricies eleifend. Ut venenatis sem nulla, ac ornare dolor tincidunt vitae. Donec eget risus mauris. Praesent vehicula lobortis pulvinar.\n\nNam sed lacus eget risus placerat maximus. Nulla pellentesque eu ex sit amet mattis. Ut fringilla dui varius varius mattis. Fusce lorem ex, hendrerit nec erat id, efficitur consectetur ipsum. Proin magna ipsum, eleifend vitae quam eu, feugiat sagittis ante. Mauris auctor est nisi, sit amet sagittis purus accumsan eget. Morbi posuere mauris auctor ipsum viverra, a rutrum erat aliquam. Aliquam iaculis feugiat vehicula. Proin dapibus augue at nisl imperdiet auctor. Donec ornare venenatis ultricies. Curabitur dictum porttitor ligula. Fusce malesuada egestas imperdiet.\n\n![One more nice landscape](https://static.photocdn.pt/images/articles/2017/04/28/iStock-546424192.jpg)\n\nCurabitur blandit tempor vulputate. Donec in molestie odio. Praesent vulputate, enim euismod sodales maximus, urna diam consectetur tellus, at varius elit lacus at lectus. Sed placerat scelerisque metus, in malesuada enim interdum non. Proin cursus purus vitae faucibus ullamcorper. Suspendisse vitae mollis purus. Nullam molestie efficitur nisi sit amet tempor. Sed tincidunt neque vitae condimentum lacinia. Etiam varius felis quis bibendum dignissim. Pellentesque magna nibh, iaculis sit amet nulla et, convallis scelerisque dui. Donec nunc nisl, luctus non dignissim sit amet, tristique vitae elit. Donec dignissim, felis id bibendum consequat, felis neque elementum est, sed malesuada nisl nibh ut est. Nam ex ipsum, volutpat et vehicula non, sodales vitae tellus.\n\n#### Thanks for reading!\nYeah, I know you didn\'t read. Thanks anyway.',
        excerpt: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nec lacus a velit ornare varius eget placerat tortor. In hendrerit aliquam eros quis semper.',
        author: 'Udacity Student',
        category: 'udacity',
        voteScore: 0,
        deleted: false,
        commentCount: 0,
        favorite: false
    },
    "8xf0y6ziyjabvozdd253nd": {
        id: '8xf0y6ziyjabvozdd253nd',
        timestamp: 1519237303055,
        title: 'A beginners guide to ReactJS',
        body: '## 1. What is React?\n\nReact is a **front-end JavaScript library** for creating **user interface**. In other words *Reactjs *is all about **components **like if you think of *React *then you actually think of c**omponent**.‚Äù\n\n## 2. What is Component?\n\n![](https://cdn-images-1.medium.com/max/2000/1*Ha6FrAlyMXY15bvL_QoCuQ.jpeg)\n\nA *component *is a small piece of **User Interface**. Let‚Äôs try to understand by examining the figure. First of all there is a main component (or parent component) called **APP component. **This App component contains four child components or it is divided into four components:\n\n* Header\n\n* Sidebar\n\n* Content\n\n* Footer\n\nEach component‚Äôs function will be handled independently with other components. Each component is a reusable piece, and you can think about each component in isolation.\n\n### Youtube Example:\n\n![](https://cdn-images-1.medium.com/max/2560/1*1ROh_TpxpbIKQAesYfZykA.jpeg)\n\n### App component contains three components:\n\n* Header Component contains (Navbar, Icon, SearchBar, Icons etc)\n\n* Sidebar Component contains (List of Icons, Library, Subscriptions etc..)\n\n* Content Component contains (List of Videos etc )\n\nso whenever you get the data after searching some video then this data can be handled independently only in **Header Component**.\n\n## 3. What are States and Props?\n\n## States:\n\nLets talk about states first,** State is a living variable of an application**.\n\nThere are two types of States:\n\n* Component Level State\n\n* Application Level State (Redux)\n\nFor now, we will discuss the first type i.e. Component Level State and we‚Äôll try to understand it by taking an example.\n\n![](https://cdn-images-1.medium.com/max/2560/1*GWhismB0CfOxofvkG9uYHw.jpeg)\n\nAs you can see we have taken an example of Youtube Search bar here. When you open Youtube and you have to search for something. so initially **Search is empty (i.e. Search=‚Äù ‚Äù). **Now you search for **Sports Video** so at that time, the value of Search will be **Sports Video (i.e. Search=‚ÄùSports Video‚Äù) **and all the sports related videos will be shown. Similarly for other two like if you search for **Education Videos** or **Dance Videos** then the respected videos will be shown . Here **Search** is a **state variable**. The point that needs to understand here is you are changing the value of **Search **continuously and for that reason we call it a **Living Variable.**\n\n## Props:\n\nProps is something that carries same data throughout its life cycle. Whenever you set the value of props once, it won‚Äôt be changed after. Lets understand it by example:\n\n![](https://cdn-images-1.medium.com/max/2266/1*JkMORgecsiKw8jCwuB1TeA.jpeg)\n\nThe picture is divided into two parts. Lets discuss both parts one by one.\n\n* In first picture, two components are highlighted here, **Searchbar component** and **Content Component**. The result of search in **Searchbar component** will be displayed in **content component**. There is a kind of **sending data from one component to another.** This is where props comes into play. The data will not be changed into another component.\n\nFor example if data **A **is sent from Component **A **to Component **B** so that data won‚Äôt be changed in Component **B **(lets try to understand it in second part)**.**\n\n* In second picture, user searches for **Sports Video. **As a result of this query, **sports data** is ready to send and display in **Content Component** from **Searchbar Component**. As I have discussed before that data won‚Äôt be changed like the sports data will not be changed to any other data like Education data etc. The data which is sent from **SearchBar Component** and has to be displayed in **Content Component** is **Sports Video **and it will never change. This whole mechanism will be done by props easily.\n\n***\n[Original Post](https://medium.com/@hamzzza.ahmed95/a-beginners-guide-to-reactjs-2b59db83fa18)',
        excerpt: 'React is a front-end JavaScript library for creating user interface. In other words Reactjs is all about components like if you think of React then you actually think of component.‚Äù',
        author: 'hamza ahmed',
        category: 'react',
        voteScore: 6,
        deleted: false,
        commentCount: 2,
        favorite: false
    },
    "6ni6ok3ym7mf1p33lnez": {
        id: '6ni6ok3ym7mf1p33lnez',
        timestamp: 1521155601005,
        title: 'How to Learn React‚Ää‚Äî‚ÄäA roadmap from beginner to advanced',
        body: 'Hey folks!\n\nThis guide is for people who are starting with React. I have carefully curated the best videos and articles in each section to make it easier for learning.\n\n**Note:** I‚Äôm not associated with any of the websites mentioned below. It‚Äôs purely my view.\n\n## **Prerequisites**\n\n1. Basic knowledge of HTML, CSS, and JavaScript.\n\n1. Basic understanding of ES6 features. Here‚Äôs my [article](https://hackernoon.com/es6-for-beginners-f98120b57414) explaining some of the ES6 features.\nTo get started you should at least know the following features:\n1. Let\n2. Const\n3. Arrow functions\n4. Imports and Exports\n5. Classes\n\n1. Basic understanding of how to use [npm](https://www.npmjs.com/).\n\n## Getting started\n\nYou can use online code editors to practice, or you can use [Create React App](https://github.com/facebook/create-react-app).\n\nI have setup a development environment in [JSFiddle](https://jsfiddle.net/me4z1xyp/2/) and in [Codepen](https://codepen.io/srebalaji/pen/MVbWdB).\n\nTo grasp all the fundamentals of React, you can start with the following tutorials:\n\n[React official documentation](https://reactjs.org/docs/hello-world.html) by React\n\n[Beginners guide to React](https://egghead.io/courses/the-beginner-s-guide-to-reactjs) by Kent C. Dodds\n\n[Fundamentals of React](https://medium.freecodecamp.org/all-the-fundamental-react-js-concepts-jammed-into-this-single-medium-article-c83f9b53eac2) by [Samer Buna](undefined)\n\nBy now, you should have a basic idea of the fundamentals of React. It‚Äôs enough to start developing simple web apps in React.\n\nNow, take a look at the React official tutorial:\n\n[React Official tutorial](https://reactjs.org/tutorial/tutorial.html) by React\n\nIt‚Äôs a well-written article covering the fundamentals of React. And it also explains the specific topics very clearly.\n\nLast but not least, learn how to connect to APIs with React apps:\n\n[Fetching API with React.js](https://blog.hellojs.org/fetching-api-data-with-react-js-460fe8bbf8f2) by [Ethan Jarrell](undefined)\n\n### **Start building some projects**\n\n1. Simple todo-app\n\n1. Simple calculator app\n\n1. Build a shopping cart\n\n1. Display GitHub‚Äôs user stats using GitHub API\n\n## **React Router**\n\nReact Router helps you create routes to your single page applications. It‚Äôs very powerful and easy to use with your React application.\n\nTo get started:\n\n[React Router tutorial](https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf) by [Paul Sherman](undefined)\n\n[React Router and intro to SPA](https://www.youtube.com/watch?v=1iAG6h9ff5s) by Learn Code Academy\n\n[Routing React apps](https://scotch.io/tutorials/routing-react-apps-the-complete-guide) by Scotch.io\n\nThese articles are more than enough for you to get started with React routing.\n\n### **Projects**\n\n1. A simple CURD application\n\n1. Hacker News clone\n\nIf you are really interested in learning much about Router, check out the following guide:\n\n[React Router](https://reacttraining.com/react-router/web/example/basic) complete guide by React Training\n\n## **Webpack**\n\nWebpack is a famous JavaScript module bundler. Webpack helps you to maintain dependencies as static files for your project so developers don‚Äôt have to do it.\n\nWebpack also comes with loaders. Loaders help run specific tasks around your project.\n\nTo learn much more about Webpack, follow the following tutorials.\n\n[When and why to use Webpack](https://blog.andrewray.me/webpack-when-to-use-and-why/) by Andrew Ray\n\n[Webpack tutorial](https://www.youtube.com/watch?v=9kJVYpOqcVU) by Learn Code Academy\n\nTo setup your local React environment using Webpack, you can refer to the following GitHub repo:\n\n[React SPA template](https://github.com/meetajhu/react-spa-template) by Hanif Roshan\n\nI think the above tutorials are enough to get started with Webpack. However, to get in-depth knowledge you can refer to the following guides:\n\n[Webpack introduction](https://survivejs.com/webpack/introduction/) by SurviveJS\n\n[Webpack official docs](https://webpack.js.org/concepts/)\n\n## **Server rendering**\n\nServer rendering is one of the coolest features in React. It can be used with any of the back-end technologies.\n\nServer Side Rendering (SSR) in React helps you to create components in the server and render that as HTML in your browser. And when all the JavaScript modules are downloaded in the browser, React takes the stage. Simple!\n\nFirst of all, take a look at the React-DOM API:\n\n[React-DOM API](https://reactjs.org/docs/react-dom-server.html) by React\n\nAnd follow the below tutorials to get in-depth knowledge:\n\n[React server rendering](https://tylermcginnis.com/react-router-server-rendering/) by Tyler McGinnis\n\n[React router server rendering](https://medium.com/front-end-hacking/server-side-rendering-with-react-and-express-382591bfc77c) by [Roilan Salinas](undefined)\n\n[React Server side rendering guide](https://medium.com/styled-components/the-simple-guide-to-server-side-rendering-react-with-styled-components-d31c6b2b8fbf) by [Dennis Brotzky](undefined)\n\n## **Redux**\n\nRedux is a JavaScript library developed for maintaining application states. When you are building a complex application, it will add overhead to manage states across components. Redux helps you store all your states in a single source. And of course, React plays well with Redux :)\n\nTo get started:\n\n[Redux tutorial](https://www.youtube.com/playlist?list=PLoYCgNOIyGADILc3iUJzygCqC8Tt3bRXt)** **by Learn Code Academy\n\n[Redux tutorial for beginners](https://dev.to/valentinogagliardi/react-redux-tutorial-for-beginners-learning-redux-in-2018-13hj) by Valentino Gagliardi\n\n[React Redux](https://css-tricks.com/learning-react-redux/) by CSS Tricks\n\nThese tutorials are more than enough to getting started with Redux. However, I cannot resist mentioning the below tutorial too. It‚Äôs worth it :)\n\n[Getting started with Redux](https://egghead.io/courses/getting-started-with-redux) by Dan Abramov\n\n## **Resources**\n\n[Awesome React](https://github.com/enaqx/awesome-react)\n\nIf you like the article, don‚Äôt forget to share it :)\n***\n[Original Post](https://medium.freecodecamp.org/learning-react-roadmap-from-scratch-to-advanced-bff7735531b6)',
        excerpt: 'This guide is for people who are starting with React. I have carefully curated the best videos and articles in each section to make it easier for learning.',
        author: 'Srebalaji Thirumalai',
        category: 'react',
        voteScore: 5,
        deleted: false,
        commentCount: 0,
        favorite: false
    },
    "e3xg81wkvg": {
        id: 'e3xg81wkvg',
        timestamp: 1540562703055,
        title: 'Concepts to become an advanced React developer',
        body: '![React Logo](https://cdn-images-1.medium.com/max/4000/1*hNRK_zr3qrTORJXD3pwuZA.png)*React Logo*\n\nWe all love ReactJS. It is one of the best and popular way to create SPA(Single Page Application). It offers flexibility and facility. It has great feature to use it to create a single component in the [existing website](https://reactjs.org/docs/add-react-to-a-website.html) or use it to create the [whole website](https://reactjs.org/docs/create-a-new-react-app.html) from scratch.\n\nNow ReactJS is a framework used by many other frameworks or toolkits such as [NextJs](http://nextjs.org/), [GatsByJs](https://www.gatsbyjs.org/), Razzle, [AfterJs](https://github.com/jaredpalmer/after.js) etc. So becoming a better ReactJS developer will in turn help you to better use these frameworks.\n\n## Use Fragment instead of div\n\nMany times we want to hold multiple components and as render allows only one component to return, we use div tag to contain all of our components. This add an extra HTML element in our document.\n\nAccording to the official guide,\n> Sometimes we break HTML semantics when we add <div> elements to our JSX to make our React code work, especially when working with lists (<ol>, <ul> and <dl>) and the HTML <table>. In these cases we should rather use [React Fragments](https://reactjs.org/docs/fragments.html) to group together multiple elements.\n\n    import React, { Fragment } from \'react\';\n    \n    function ListItem({ item }) {\n      return (\n    **    <Fragment>**\n          <dt>{item.term}</dt>\n          <dd>{item.description}</dd>\n    **    </Fragment>**\n      );\n    }\n    \n    function Glossary(props) {\n      return (\n        <dl>\n          {props.items.map(item => (\n            <ListItem item={item} key={item.id} />\n          ))}\n        </dl>\n      );\n    }\n\nFor more info, see [the Fragments documentation](https://reactjs.org/docs/fragments.html).\n\n## Use context more\n\nAs the officials say about it, Context provides a way to pass data through the component tree without having to pass props down manually at every level.\n\nSo if you have multiple components that needs a value then use context. If you have only a single child component that needs this value use [compositions](https://reactjs.org/docs/context.html#before-you-use-context).\n\none example to set theme from the official docs,\n\n**theme-context.js**\n\n    export const themes = {\n      light: {\n        foreground: \'#000000\',\n        background: \'#eeeeee\',\n      },\n      dark: {\n        foreground: \'#ffffff\',\n        background: \'#222222\',\n      },\n    };\n\n    export const ThemeContext = React.createContext(\n      themes.dark // default value\n    );\n\n**themed-button.js**\n\n    import {ThemeContext} from \'./theme-context\';\n\n    class ThemedButton extends React.Component {\n      render() {\n        let props = this.props;\n    **    let theme = this.context;**\n        return (\n          <button\n            {...props}\n            style={{backgroundColor: theme.background}}\n          />\n        );\n      }\n    }\n    **ThemedButton.contextType = ThemeContext;**\n\n    export default ThemedButton;\n\n**app.js**\n\n    import {ThemeContext, themes} from \'./theme-context\';\n    import ThemedButton from \'./themed-button\';\n\n    // An intermediate component that uses the ThemedButton\n    function Toolbar(props) {\n      return (\n        <ThemedButton onClick={props.changeTheme}>\n          Change Theme\n        </ThemedButton>\n      );\n    }\n\n    class App extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = {\n          theme: themes.light,\n        };\n\n    this.toggleTheme = () => {\n          this.setState(state => ({\n            theme:\n              state.theme === themes.dark\n                ? themes.light\n                : themes.dark,\n          }));\n        };\n      }\n\n    render() {\n        // The ThemedButton button inside the ThemeProvider\n        // uses the theme from state while the one outside uses\n        // the default dark theme\n        return (\n          <Page>\n    **        <ThemeContext.Provider value={this.state.theme}>**\n              <Toolbar changeTheme={this.toggleTheme} />\n    **        </ThemeContext.Provider>**\n            <Section>\n              <ThemedButton />\n            </Section>\n          </Page>\n        );\n      }\n    }\n\n    ReactDOM.render(<App />, document.root);\n\n## Have at least one Error Boundaries\n\nReact 16 comes with an amazing feature Error Boundaries. As the name suggests, It bounds the error of all the child components. The idea is very simple. Create a React component and use it as parent wherever you want to handle the errors. If there is any error in your child component then your Error Boundary component will be called to handle the error.\n> Keep in mind that rendering error are handled using error boundaries. Imperative errors such as in Event handlers should be handled using javascript try/catch blocks.\n\nUse componentDidCatch() to log error information.\n\n    class ErrorBoundary extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n      }\n\n    static getDerivedStateFromError(error) {\n        // Update state so the next render will show the fallback UI.\n        return { hasError: true };\n      }\n\n    componentDidCatch(error, info) {\n        // You can also log the error to an error reporting service\n        logErrorToMyService(error, info);\n      }\n\n    render() {\n        if (this.state.hasError) {\n          // You can render any custom fallback UI\n          return <h1>Something went wrong.</h1>;\n        }\n\n    return this.props.children; \n      }\n    }\n\nThen you can use it as a regular component:\n\n    <ErrorBoundary>\n      <MyWidget />\n    </ErrorBoundary>\n\nIf the ErrorBoundary component has an error in itself then it cannot handle it üòê.\n\nThe feature was there in React 15 named unstable_handleError.This method no longer works, and you will need to change it to componentDidCatch in your code starting from the first 16 beta release.\n\nFor this change, React has provided a [codemod](https://github.com/reactjs/react-codemod#error-boundaries) to automatically migrate your code.\n\n## Use production build in LIVE environment\n\nOfficial site has listed many configurations which can increase your performance. Don‚Äôt forget to check them out before deploying to the LIVE environment.\n\nCheck out the guide here, [reactjs.org/docs/optimizing-performance](https://reactjs.org/docs/optimizing-performance.html)\n\nIt will take merely 10 minutes to configure and will give amazing performance boost to your app.\n\n## Use Refs to interact with child\n\nWe can use Refs to trigger animation, text selection or manage the focus.\n\nFor example,\n\nTo set focus in React, we can use [Refs to DOM elements](https://reactjs.org/docs/refs-and-the-dom.html).\n\nUsing this, we first create a ref to an element in the JSX of a component class:\n\n    class CustomTextInput extends React.Component {\n      constructor(props) {\n        super(props);\n        // Create a ref to store the textInput DOM element\n    **    this.textInput = React.createRef();**\n      }\n      render() {\n      // Use the `ref` callback to store a reference to the text input DOM\n      // element in an instance field (for example, this.textInput).\n        return (\n          <input\n            type=\"text\"\n    **        ref={this.textInput}**\n          />\n        );\n      }\n    }\n\nThen we can focus it elsewhere in our component when needed:\n\n    focus() {\n      // Explicitly focus the text input using the raw DOM API\n      // Note: we\'re accessing \"current\" to get the DOM node\n    **  this.textInput.current.focus();**\n    }\n\nFor more info, see [programmatically-managing-focus](https://reactjs.org/docs/accessibility.html#programmatically-managing-focus).\n\n## Use code splitting\n\nIf you‚Äôre using CRA(create react app) or NextJs then there will a webpack configuration file already. It will create a single file(bundle) which will contain your whole app. Now if you use third party libraries or your app becomes larger then your bundle file will also be larger. When a user comes to the website then browser will download the whole bundle file and then render the website. This can slow your website drastically so code splitting allows the generated to split and create multiple outputs. So the browser will load the appropriate bundle when it needs it. In turn improving the site load up time.\n\nWe can use **React.lazy** to achieve this,\n> *Official Note:React.lazy and Suspense is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend [React Loadable](https://github.com/thejameskyle/react-loadable). It has a nice [guide for bundle splitting with server-side rendering](https://github.com/thejameskyle/react-loadable#------------server-side-rendering).*\n\nYou can split your code in various ways but a good starting point is based on routes,\n\nMost people on the web are used to page transitions taking some amount of time to load. You also tend to be re-rendering the entire page at once so your users are unlikely to be interacting with other elements on the page at the same time.\n\nHere‚Äôs an example of how to setup route-based code splitting into your app using libraries like [React Router](https://reacttraining.com/react-router/) with React.lazy.\n\n    import { BrowserRouter as Router, Route, Switch } from \'react-router-dom\';\n    import React, { Suspense, lazy } from \'react\';\n\n    const Home = lazy(() => import(\'./routes/Home\'));\n    const About = lazy(() => import(\'./routes/About\'));\n\n    const App = () => (\n      <Router>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/about\" component={About}/>\n          </Switch>\n        </Suspense>\n      </Router>\n    );\n\n**Suspense** is nothing but a fallback mechanism. if the required bundle is not loaded yet then it will be shown. You can add a your spinner here to show loading sign to your users.\n> You can even use ErrorBoundary as parent to Suspense to handle other error such as network error!\n\nReact.lazy currently only supports default exports. So if you want to use it with named exports, check out [named-exports](https://reactjs.org/docs/code-splitting.html#named-exports).\n\n## Static Type Checking\n\nJavascript is not typed language and many of the problems arise due to wrong types. Using a mo\n\nwe can use various type checkers available in the market But one famous and beginner friendly tool is [Flow](https://flow.org/). It is developed at Facebook and is often used with React. It lets you annotate the variables, functions, and React components with a special type syntax, and catch mistakes early. You can read an [introduction to Flow](https://flow.org/en/docs/getting-started/) to learn its basics. step by step instructions are given in this [official react guide](https://reactjs.org/docs/static-type-checking.html#flow).\n\n### Bonus tip\n\nEnsure that your web application can be fully operated with the keyboard only,\n\n* [WebAIM talks about keyboard accessibility](http://webaim.org/techniques/keyboard/)\n\nThank you for reading!\n***\n[Original Post](https://medium.com/wineofbits/concepts-to-become-an-advanced-react-developer-684d90c086c2)',
        excerpt: 'We all love ReactJS. It is one of the best and popular way to create SPA(Single Page Application). It offers flexibility and facility.',
        author: 'Dhanraj Acharya',
        category: 'react',
        voteScore: 1,
        deleted: false,
        commentCount: 0,
        favorite: false
    },
    "vujvlt61dy": {
        id: 'vujvlt61dy',
        timestamp: 1484843712007,
        title: 'Redux‚Äôs Mysterious Connect Function',
        body: 'This post is mainly for beginners to React/Redux. However I‚Äôve found even experienced developers struggle with the third and fourth connect() parameters. So read on anyways!\n\nSo you‚Äôve created your first action creators, reducers, and store files‚Ä¶ Now what? How does the state from your reducers and the functions from your action creators get used in your application? And how do you pass the necessary data to your action creators to update the store? A quick google search on this matter will show many others with the same question(s)‚Ä¶\n> # How do you bridge data coming from your React code to your Redux code and vise versa?\n\n## Enter Redux‚Äôs Container\n\nLet‚Äôs start by defining some terminology here. *As mentioned above, there needs to be glue that connects the Redux data flow with the React components. *The container is meant to be the file that holds all the data and functions required to connect store state and action creators actions to React component props. It is in this file where your action creators are imported, the Redux ‚Äòconnect‚Äô function is imported, the parent React component is imported, and any other methods/data are imported (i.e routing and initial server loading).\n\n    import {connect} from \'react-redux\';\n\n    import Template from \'../components/Template.js\'\n\n    import {increment, decrement} from \'../actions/sidebar.js\';\n\n    import {isBrowser} from \'../env.js\'; \n\nFirst off, it is important to note that not all React/Redux applications call the highest parent file a ‚Äòcontainer‚Äô. I‚Äôve seen through various Redux trainings that [not all developers](https://learnredux.com/) refer to this file/component as the container. However, it is in fact referred to as the container within [Redux‚Äôs documentation.](http://redux.js.org/docs/recipes/ComputingDerivedData.html)\n\nNow the connect function. The [documentation for connect](https://github.com/reactjs/react-redux/blob/master/docs/api.md) within Redux is difficult to understand, which creates a sense of mystery. Simply think of this as a component that takes props as parameters, which in return supplies actions and state to the provided React component via props‚Ä¶ Confused yet? Well let‚Äôs break this down some more.\n\nThe following shows the connect function breakdown:\n\n    connect(mapStateToProps, mapDispatchToProps, mergeProps, options)(component);\n\nAs you can see from above, there are four parameters within the connect function, with another argument that accepts the imported React component.\n\n1. mapStateToProps\n\n1. mapDispatchToProps\n\n1. mergeProps ‚Äî optional\n\n1. options ‚Äî optional\n\nWe‚Äôll break down what each one of these do in a moment. It is important to note that when connect renders successfully, you will be able to see that connect is now the parent component of the provided React component within the container file.\n\n![](https://cdn-images-1.medium.com/max/3044/1*bjmQaJgLBxrON03b6EEctg.png)\n\n## mapStateToProps\n\nYou will see shortly that some of these parameters can be a function or an object. However, mapStateToProps needs to be a function. This function does exactly what the name suggests, connect state from the store to corresponding props. This make it possible to access your reducer state objects from within your React components. This function will subscribe to the Redux store and any updates will update props automatically. mapStateToProps needs to return an object, where the key is the new prop name to be used in the React app and the value is the name of the reducer function.\n\n    // ES5\n\n    function mapStateToProps({ reducer1: reducer1, reducer2: reducer2}) {\n        return ({reducer1 : reducer1, reducer2 : reducer2 });\n    }\n\n    // ES6\n\n    const mapStateToProps = ({ reducer1, reducer2}) =>\n        ({reducer1, reducer2 }); \n\nYou might ask.. Why didn‚Äôt you mention needing to import these reducers into your container file, like the action creators? Well connect subscribes to the store automatically and these state objects (or reducers) will be provided automatically.\n\n## mapDispatchToProps\n\nmapDispatchToProps can either be a function or an object. Now assuming that you have some knowledge of Redux, you‚Äôll understand the importance of using ‚Äòdispatch‚Äô. If not, here is a basic definition of ‚Äòdispatch‚Äô [from Redux](http://redux.js.org/docs/api/Store.html#dispatch):\n> Dispatches an action. This is the only way to trigger a state change.\n> The store‚Äôs reducing function will be called with the current getState() result and the given action synchronously. Its return value will be considered the next state.\n\nSo essentially the only way to update your store/state is by using ‚Äòdispatch‚Äô with an action creator.\n\n    import {actionCreator1, actionCreator2} from \'../actions/main.js\';\n\n    \n    const bindActionsToDispatch = dispatch => \n    (\n      {\n        actionCreator1 : () => dispatch(actionCreator1()),\n        actionCreator2 : (e) => dispatch(actionCreator2(e))\n      }\n    );\n\nThere are two important things happening in the code above. The first is we‚Äôre are setting up props that hold our action creators. I like to keep the names of the props the same as the name of the action creator. I‚Äôve found that by keeping the state props shown earlier and the action creator props the same name as the function/object, it helps debugging later.\n\nThe second thing is binding the action creators to dispatch. Without this binding firing an action creator will do nothing. Now mapDispatchToProps is not the only way of bind dispatch and action creators, there is another way called [bindActionCreators](http://redux.js.org/docs/api/bindActionCreators.html).\n\n    import { bindActionCreators } from \'redux\';\n    import * as TodoActionCreators from \'./TodoActionCreators\';\n    \n\n    let boundActionCreators = bindActionCreators(TodoActionCreators, dispatch)\n\nThis is the least common way of binding as stated from Redux:\n> The only use case for bindActionCreators is when you want to pass some action creators down to a component that isn\'t aware of Redux, and you don\'t want to pass [dispatch](http://redux.js.org/docs/api/Store.html#dispatch) or the Redux store to it.\n\n## mergeProps\n\nI personally struggled to understand mergeProps. First of all, it is an optional parameter and is a function. The documentation on this particular function does not explain much as to it‚Äôs purpose and use cases. Hence adding to the mystery of the connect function.\n\nIn the React/Redux applications I have worked on, I have not needed to use mergeProps. If it is used, this function is passed the result of mapStateToProps(), mapDispatchToProps(), and the parent props. With this data available, it is easy to use props inherited from connect‚Äôs parent and combine them with an action creator. For example, if you are working with React Router, the variables assigned in the route path are passed as props to the connect function, if it is the connect function‚Äôs parent. You could then use those props and pass it along to your action creators to update your store with the needed URL parameters.\n\n    const mergeProps = (state, actions, {notebook, note}) => ({\n        ...state,\n        ...actions,\n        onLoad: notebook && note\n          ? () => {\n            return Promise.all([\n              actions.initActiveNotebookAndNote({notebook, note})\n            ])\n          }\n          : actions.onLoad\n    })\n\nThe above code is receiving state from mapStateToProps, actions from mapDispatchToProps, and is creating a new prop called ‚ÄòonLoad‚Äô. This prop ‚ÄòonLoad‚Äô is combining or ‚Äòmerging‚Äô (as it‚Äôs name states) props from it‚Äôs parent component (React Router) and an action creator together. That action creator can be used to update data within a Reducer:\n\n    export const initActiveNotebookAndNote = ({notebook, note}) => ({\n     type: SET_CURRENT_NOTE, \n     notebook, \n     note\n    });\n\n## options\n\nThe [options parameter](https://github.com/reactjs/react-redux/blob/master/docs/api.md) is an object. It is used to customize the behavior of the connect function. The acceptable ‚Äòoptions‚Äô are the following:\n\n1. **pure**- Boolean, if true connect() will avoid re-rendering (will not update)\n\n1. **areStatesEqual- **Compares new store state vs. old*\n\n1. **areOwnPropsEqual- **Compares new props vs. old*\n\n1. **areStatePropsEqual- **Compares new mapStateToProps vs. old*\n\n1. **areMergedPropsEqual- **Compares new mergeProps vs. old*\n\n**Only when pure functions*\n\nThese options are not commonly used and are best explained by [Redux](https://github.com/reactjs/react-redux/blob/master/docs/api.md):\n> You may wish to override areStatesEqual if your mapStateToProps function is computationally expensive and is also only concerned with a small slice of your state. For example: areStatesEqual: (prev, next) => prev.entities.todos === next.entities.todos; this would effectively ignore state changes for everything but that slice of state.\n> You may wish to override areStatesEqual to always return false (areStatesEqual: () => false) if you have impure reducers that mutate your store state. (This would likely impact the other equality checks is well, depending on your mapStateToProps function.)\n> You may wish to override areOwnPropsEqual as a way to whitelist incoming props. You\'d also have to implement mapStateToProps, mapDispatchToProps and mergeProps to also whitelist props. (It may be simpler to achieve this other ways, for example by using [recompose\'s mapProps](https://github.com/acdlite/recompose/blob/master/docs/API.md#mapprops).)\n> You may wish to override areStatePropsEqual to use strictEqual if your mapStateToProps uses a memoized selector that will only return a new object if a relevant prop has changed. This would be a very slight performance improvement, since would avoid extra equality checks on individual props each time mapStateToProps is called.\n> You may wish to override areMergedPropsEqual to implement a deepEqual if your selectors produce complex props. ex: nested objects, new arrays, etc. (The deep equal check should be faster than just re-rendering.)\n\n## Conclusion\n\nRedux‚Äôs connect function within the container folder is in my opinion the most essential aspect of a React/Redux application. Now there are other ways to connect everything up without using Connect(), however this is by far the easiest way. It truly is the bridge between dumb React components and the Flux data flow of Redux.\n\nHere is a final example that shows the connect function :\n\n    import {connect} from \'react-redux\';\n\n    import Template from \'../components/Template.js\';\n\n    import {actionCreator1, actionCreator2} from \'../actions/main.js\';\n\n    const mapStateToProps = ({ reducer1, reducer2}) =>\n        ({reducer1, reducer2 });\n\n    const bindActionsToDispatch = dispatch => \n    (\n      {\n        actionCreator1 : () => {dispatch(actionCreator1())},\n        actionCreator2 : (e) => {dispatch(actionCreator2(e))}\n      }\n    );\n\n    const mergeProps = (state, actions, {notebook, note}) => ({\n        ...state,\n        ...actions,\n        onLoad: notebook && note\n          ? () => {\n            return (\n              actions.initActiveNotebookAndNote({notebook, note})\n            )\n          }\n          : null\n    });\n\n    connect(mapStateToProps, bindActionsToDispatch, mergeProps, { withRef: true })(Template);\n\n### Follow me on twitter! @iamtylerwclark\n***\n[Original Post](https://medium.com/mofed/reduxs-mysterious-connect-function-526efe1122e4)',
        excerpt: 'So you‚Äôve created your first action creators, reducers, and store files‚Ä¶ Now what?',
        author: 'tyler clark',
        category: 'redux',
        voteScore: 10,
        deleted: false,
        commentCount: 0,
        favorite: false
    },
    "fz53emhrrjv": {
        id: 'fz53emhrrjv',
        timestamp: 1522649175043,
        title: 'Setting Up a Redux Project With Create-React-App',
        body: '**A Byte About Redux**\n\nRedux is definitely the new cool üòé ‚Äî state management made easy with just a single state tree. Although it‚Äôs been largely associated with React, Redux can also be used with other view libraries (e.g Vue, Meteor, Angular, etc). Luckily, setting it up with Create-React-App (CRA) is quite straight forward.\n\n**The Project Setup**\n\nYou can set up your project in two ways.\n\n1.) Install create-react-app globally (for older versions of npm). This provides a CLI command ‚Äî **create-react-app **‚Äî to create a project.\n\n    npm install -g create-react-app\n\nTo create a new project, simply type the CLI command (create-react-app) plus the name of your project (in my case, **redux-cra ) **and hit enter üòé\n\n    create-react-app redux-cra\n\n2.) Alternatively, you can use **npx** ‚Äî this is a new binary that comes alongside [npm v5.2 and above](https://github.com/npm/npm/releases/tag/v5.2.0). To create a new project, just prepend npx before create-react-app redux-cra. This installs create-react-app globally (if it has not been installed) and also creates a new project.\n\n    npx create-react-app redux-cra\n\nNow that your project is setup, we can begin hacking (Lol). In your terminal (or CLI. I prefer to use terminal though üôÇ), do the following:\n\n    cd redux-cra\n    npm start\n\nThis should start your project on port **3000**.\n\n![](https://cdn-images-1.medium.com/max/5112/1*-utBF_m_5wBoPEZpEuaT3w.png)\n\n**A Glimpse of a CRA Project Folder Structure**\n\nYour newly created project‚Äôs folder structure should be similar to the image below.\n\n![](https://cdn-images-1.medium.com/max/4816/1*4DLlqJQWCAdLh63i-HYw3w.png)\n\n**Note:** For your project to build, the following files must exist with exact filenames:\n\n* **public/index.html** is the page template;\n\n* **src/index.js** is the JavaScript entry point.\n\n**Redux Setup**\n\nTo setup Redux, these packages are required: **redux**, **react-redux**, and **redux-thunk**. Why? The answers are simple.\n\n1. **redux** is the core that performs the magic üòÑ\n\n1. By default, React bindings are not included in Redux. With **react-redux **, these bindings will be explicitly installed.\n\n1. **redux-thunk **is a middleware that allows you to write action creators (we‚Äôll get to this in a bit) that return a function. The returned function receives two store (we‚Äôll also talk more on this) methods: **dispatch** and **getState** as parameters. If you‚Äôre still unsure about the purpose of **redux-thunk**, you can read Dan Abramov‚Äôs reference to it [here](http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559).\n\nNow that you understand the purposes of these packages, let‚Äôs install them.\n\n    npm install redux react-redux redux-thunk --save\n\n**Action Creators**\n\nPeople often use **actions** and **action creators** interchangeably. On the contrary, they are two different entities. **Actions** are payloads of information which send data to the store. Essentially, they are JavaScript objects. What makes a particular action unique is the **type** key defined in it.\n\nYeah, you guessed right ‚Äî an action **must** have a **type** key. The **type** indicates the type of action being performed.\n\nOn the other hand, **action creators** are functions that create **actions** ‚Äî they simply return actions. For manageability and ease, **redux-thunk** allows you to write them as functions that return a function (a callback? ü§î).\n\nMoving forward, action creators will be defined in an **actions** folder in **src **(you can choose to name yours differently ‚Äî name it ‚Äúaction-creators‚Äù, ‚Äúaction-initiators‚Äù, etc. They are also cool üòé).\n\n    **/*\n     src/actions/simpleAction.js\n    */**\n\n    export const simpleAction = () => dispatch => {\n     dispatch({\n      type: \'SIMPLE_ACTION\',\n      payload: \'result_of_simple_action\'\n     })\n    }\n\n**Reducers**\n\nThese describe how the application state changes with respect to actions dispatched to the redux store.\n\nCreate a **reducers** folder in **src** and define reducers for your app actions. Here‚Äôs an example of reducer:\n\n    **/*\n     src/reducers/simpleReducer.js\n    */**\n\n    export default (state = {}, action) => {\n     switch (action.type) {\n      case \'SIMPLE_ACTION\':\n       return {\n        result: action.payload\n       }\n      default:\n       return state\n     }\n    }\n\nUsing the [**combineReducers](https://redux.js.org/api-reference/combinereducers)** utility from **redux, **you can combine all reducers in the app into a single index reducer. For this project, we‚Äôll reference this index reducer as **rootReducer.** In your **reducers **folder, create **rootReducer.js** and import all reducers defined for your app actions.\n\n    **/*\n     src/reducers/rootReducer.js\n    */**\n\n    import { combineReducers } from \'redux\';\n    import simpleReducer from \'./SimpleReducer\';\n\n    export default combineReducers({\n     simpleReducer\n    });\n\n**Redux Store**\n\nEssentially, the redux store does the following:\n\n* Holds application state\n\n* Allows access to state via [getState()](https://redux.js.org/api-reference/store#getState). The **getState** method returns the current state tree of your app.\n\n* Allows state to be updated via [dispatch(action](https://redux.js.org/api-reference/store#dispatch)) . The **dispatch** method ‚Äúdispatches‚Äù an action, consequently triggering a state change.\n\n* Registers listeners via [subscribe(listener](https://redux.js.org/api-reference/store#subscribe)) . The **subscribe(listener) **adds a change listener. Similar to Flux‚Äôs change listener methods.\n\n* Handles unregistering of listeners via the function returned by [subscribe(listener)](https://redux.js.org/api-reference/store#subscribe).\n\n**Note:** A redux application needs only one store.\n\nIn src folder, create a store.js file and configure the redux store. You can also define an **initialState** parameter in the **configureStore** method.\n\n    **/*\n     * src/store.js\n     * No initialState\n    */**\n\n    import { createStore, applyMiddleware } from \'redux\';\n    import thunk from \'redux-thunk\';\n    import rootReducer from \'./reducers/RootReducer\';\n\n    export default function configureStore() {\n     return createStore(\n      rootReducer,\n       applyMiddleware(thunk)\n     );\n    }\n\nThe defined **initialState** of the store can either be an empty object or an object with initial key values. Here‚Äôs an example:\n\n    **/*\n     * src/store.js\n     * With initialState\n    */**\n\n    import { createStore, applyMiddleware } from \'redux\';\n    import thunk from \'redux-thunk\';\n    import rootReducer from \'./reducers/RootReducer\';\n\n    export default function configureStore(initialState={}) {\n     return createStore(\n      rootReducer,\n       applyMiddleware(thunk)\n     );\n    }\n\n**Provide Store**\n\nThe redux store is all setup but the application has no access to it yet. This is handled using the **Provider** React binding from **react-redux**. To make the store available to every component in the app, it makes sense to call this binding in the app‚Äôs entry point, in this case, **index.js **. Provider takes **store** and **children **as props. Calling **configureStore()** method from **src/store.js** creates the redux store, which is passed as props to **Provider**.\n\n    **/*\n     src/index.js\n    */**\n\n    import React from \'react\';\n    import ReactDOM from \'react-dom\';\n    import { Provider } from \'react-redux\'\n    import configureStore from \'./store\';\n\n    import \'./index.css\';\n    import App from \'./App\';\n    import registerServiceWorker from \'./registerServiceWorker\';\n\n    ReactDOM.render(\n     <Provider store={configureStore()}>\n      <App />\n     </Provider>,\n     document.getElementById(\'root\')\n    );\n    registerServiceWorker();\n\n*Start the app. All should still work fine *üòÑ\n\n**Connect React Component to Store**\n\nThis will be done using the**connect** React binding from **react-redux .**\n\n    **/*\n     src/App.js\n    */**\n\n    import React, { Component } from \'react\';\n    import { connect } from \'react-redux\';\n\n    import logo from \'./logo.svg\';\n    import \'./App.css\';\n\n    class App extends Component {\n     render() {\n      return (\n       <div className=\"App\">\n        <header className=\"App-header\">\n         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n         <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <p className=\"App-intro\">\n         To get started, edit <code>src/App.js</code> and save to reload\n        </p>\n       </div>\n      );\n     }\n    }\n\n    export default connect()(App);\n\n**connect** takes in two parameters: **mapStateToProps** and **mapDispatchToProps**. These will be discussed in a bit. For now, let‚Äôs import an action to test.\n\n    **/*\n     src/App.js\n    */**\n\n    import { simpleAction } from \'./actions/SimpleAction\'\n\n**Map Redux State to Component Props**\n\nThe **mapStateToProps** parameter of **connect** allows the React component to subscribe to redux state updates.\n\n    **/*\n     src/App.js\n    */**\n\n    const mapStateToProps = state => ({\n     ...state\n    })\n\n**Map Dispatch Function to Component Props**\n\nThe **mapDispatchToProps** parameter of **connect** can either be:\n\n1. an object of action creators wrapped into a dispatch.\n\n1. a function with a dispatch parameter. The function should return an object that uses dispatch to bind action creators. Alternatively, you can use the [**bindActionCreators()](https://redux.js.org/api-reference/bindactioncreators)** helper from **redux**\n\n    **/*\n     src/App.js\n    */**\n\n    const mapDispatchToProps = dispatch => ({\n     simpleAction: () => dispatch(simpleAction())\n    })\n\n**Update Connect Function Parameters**\n\nPassing mapStateToProps and mapDispatchToProps as connect parameters merges the action creators and store updates to the component‚Äôs props.\n\n    **/*\n     src/App.js\n    */**\n\n    export default connect(mapStateToProps, mapDispatchToProps)(App);\n\n**Test App**\n\nNow, let‚Äôs test that the store is connected and all works as intended. Add a button to App.js\n\n    **/*\n     src/App.js\n    */**\n\n    <button>Test redux action</button>\n\n* Create a function that will be called when the button is clicked\n\n    **/*\n     src/App.js\n    */**\n\n    simpleAction = (event) => {\n     this.props.simpleAction();\n    }\n\n* Bind function to button‚Äôs onClick event\n\n    **/*\n     src/App.js\n    */**\n\n    <button onClick={this.simpleAction}>Test redux action</button>\n\n* Add a **pre** tag so you can view changes in component props\n\n    **/*\n     src/App.js\n    */**\n\n    <pre>\n     {\n      JSON.stringify(this.props)\n     }\n    </pre>\n\n* Test button click\n\n![](https://cdn-images-1.medium.com/max/2000/1*cQnJEPl6O7HM7pDsXhCscQ.gif)\n\n**Conclusion**\n\nUsing CRA is awesome when you need to get your project up and running ASAP. However, if you want some degree of control over your webpack config, I suggest setting up your React project from scratch üòé ([or just eject the config ](https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#npm-run-eject)üòÉ).\n***\n[Original Post](https://medium.com/backticks-tildes/setting-up-a-redux-project-with-create-react-app-e363ab2329b8)',
        excerpt: 'Redux is definitely the new cool üòé ‚Äî state management made easy with just a single state tree.',
        author: 'Esther Falayi',
        category: 'redux',
        voteScore: 7,
        deleted: false,
        commentCount: 0,
        favorite: false
    }
}